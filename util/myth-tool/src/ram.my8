
; Firmware for Myth Micro-Controller Systems
; 2025 Michael Mangelsdorf (mim@ok-schalter.de)
; Project files: https://github.com/michaelmangelsdorf/myth
; Assemble using "my -a rom.my8" tool

; Use P4 as Parameter Stack Pointer
; Use P3 as Threading Stack Pointer
; Use P2 as Threading Token Pointer (IP)

; Try to keep page code to below 80h (Threaded Code offset and Locals)

; My-Tool tweak: writing into E talks to VM, E=0 means print pulley.

0@IRQ: fb #KEYPAGE, KEY
       fo FFh
       fb #PSTACK, BOP4
       fb #TSTACK, BOP3

       fa 7 fa 3 fc >MUL8 a1 xa a2 ; a2 = 21
       fa 88 fa 19 fc >DIVMOD8 a1 xa a2 ;   4 rem 12

@done  fb 21h, fo 80h, fa 65, am. ; EXIT signal for my-tool

32@MYREGS:  ; Reserved
33@MYBUFS:  ; Reserved

34@KEYPAGE:


35@PSTACK:  ; Reserved
36@TSTACK:  ; Reserved

; ---------------------------------------------------------------------------

; Multiply A times X, result in A:X

37@MUL8:
    a1          (Save multiplicand into L1 - turns into low order result)
    xa a4       (Save multiplier into L4)
    fa 0, a2    (Set high-order result to 0, keep in L2)
    fd 7        (Initialise loop counter, 8 bits to process)
    @loop
        fa b0000_0001, 1a AND  (Check LSB of multiplicand)
        fz >a                  (Skip if zero)
            4a 2a ADDC a2      (Add multiplier to high order result)
        @a
        1a SHR, a1             (Shift low-order result right)
        2a SHR, a2             (Shift high-order result right, LSB saved to X)
        xa 1a IOR, a1          (Carry high-order LSB into low-order MSB)
    fw <loop
    1a          (Push low-order result)
    2a          (Push high-order result)
    RTS

; ---------------------------------------------------------------------------

; Divide X by A, quotient in A, remainder in X

38@DIVMOD8:
    
    fz >e           ; Divisor is zero!
    a1 xa a6        ; Divisor into L1, dividend into L6
    fa 0 a3         ; Initialise quotient
    fa 0 a4         ; Shift counter
    fd 8            ; Max number of bit shifts

@a  1a fn >b        ; Branch if divisor MSB set
    shl a1          ; Shift divisor left
    4a inc a4       ; Increment bit counter
    fw <a           ; Repeat until either MSB set or 8 shifts
@b  4d              ; Keep as next loop counter

@c  3a shl a3       ; Shift quotient left
    6a 1a SUBB a8   ; Subtract divisor from dividend and check
    xa fh >d        ; If borrow bit set (dividend is less than)
    8a a6           ; Accept subtraction result, update dividend
    3a inc a3       ; Increment quotient
@d  1a shr a1       ; Shift divisor right until smaller than dividend
    fw <c

    6a 3a           ; Push remainder, quotient
@e  RTS

; ---------------------------------------------------------------------------


128@SYMTAB:



